?roc.test
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(1, 0.8), partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(1, 0.8), partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1), partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1), partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1), partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1), partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1))
#, partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1)),
# partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1))
#, partial.auc.focus="se")
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1))
#, partial.auc.focus="se")
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b, partial.auc=c(0.8, 1))
roc4 <- roc(aSAH$outcome, aSAH$wfns, partial.auc=c(0.8 ,1))
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b)
roc4 <- roc(aSAH$outcome, aSAH$wfns)
roc.test(roc3, roc4)
roc3 <- roc(aSAH$outcome, aSAH$s100b)
roc4 <- roc(aSAH$outcome, aSAH$wfns)
roc.test(roc3, roc4)
slotNames(perf)
library(ROCR)
?performance
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
slotNames(perf)
getSlots(perf)
slotNames(perf, "x.name")
getSlots(perf, "x.name")
?getSlots
slot(perf, "x.name")
slot(perf, "y.name")
slot(perf, "y.values")
q('no')
library(knitr)
?knit2html
?knit2pdf
q()
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
homedir <- file.path(basedir, study)
#basedir <- file.path("/Volumes/CT_Data/MISTIE")
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
cs =  sapply(ddf, class) == "list"
cs = names(cs)[cs]
for (icol in cs){
ddf[, icol] = unlist(ddf[, icol])
}
d = ddf
d$truevol = d$estvol = NULL
makeint = function(data){
data$scen = gsub(".*_SS_(.*)_Mask.*", "\\1", data$ssimg )
data$smooth = !grepl("nopresmooth", data$scen)
data$smooth = revalue(as.character(data$smooth),
c("TRUE"="smoothed", "FALSE"="unsmoothed"))
data$int = gsub("_nopresmooth", "", data$scen)
data
}
ddf = makeint(ddf)
ddf$diffvol = (ddf$truevol - ddf$estvol) / 1000
ddf$absdiff = abs(ddf$diffvol)
long = melt(d, id.vars = c("id", "img", "rimg",
"ssimg"))
long = makeint(long)
long$id = as.numeric(factor(long$id))
runcols =  c("dice", "jaccard", "sens", "spec", "accur", "absdiff")
rc = runcols[ !runcols %in% c("absdiff")]
# res = ddply(ddf, .(id), function(x){
# 	cmin = colMins(x[, runcols])
# 	cmax = colMaxs(x[, runcols])
# 	cmean = colMeans(x[, runcols])
# 	xx = data.frame(t(cbind(cmin, cmax, cmean)))
# 	xx$run = c("min", "max", "mean")
# 	xx
# })
wmax = function(x){
which(x == max(x))
}
x = ddf[ ddf$img == ddf$img[1], ]
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
print(xx)
names(xx) = rc
xx
})
results= sapply(res[, rc], table)
maxtab = sapply(results, function(x) {
names(sort(x, decreasing=TRUE)[1])
})
res = ddply(ddf, .(scen), function(x){
cmin = colMins(x[, runcols])
cmax = colMaxs(x[, runcols])
cmean = colMeans(x[, runcols])
cmed = colMedians(as.matrix(x[, runcols]))
xx = data.frame(t(cbind(cmin, cmax, cmean, cmed)))
xx$run = c("min", "max", "mean", "median")
xx
})
nospec = long[ long$variable %in% c("accur", "sens"),]
long = long[ long$variable != "jaccard", ]
long$variable = revalue(long$variable, c("sens" = "Sensitivity",
"spec" = "Specificity",
"accur" = "Accuracy",
"dice" = "Dice Similarity Index"))
g = qplot(x = id, y = value, facets = smooth ~ variable , data = long,
colour=int)
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot"))
g
rm(list=ls())
library(cttools)
library(fslr)
library(oro.dicom)
library(bitops)
library(arules)
library(plyr)
library(reshape2)
library(ggplot2)
library(matrixStats)
options(matlab.path='/Applications/MATLAB_R2013b.app/bin')
# username <- Sys.info()["user"][[1]]
rootdir = path.expand("~/CT_Registration")
ROIformat = FALSE
study = "Original_Images"
if (ROIformat) {
study = "ROI_images"
}
basedir = file.path(rootdir, "Final_Brain_Seg")
resdir = file.path(basedir, "results")
homedir <- file.path(basedir, study)
#basedir <- file.path("/Volumes/CT_Data/MISTIE")
fname = file.path(resdir, "Overlap_Statistics.Rda")
load(fname)
cs =  sapply(ddf, class) == "list"
cs = names(cs)[cs]
for (icol in cs){
ddf[, icol] = unlist(ddf[, icol])
}
d = ddf
d$truevol = d$estvol = NULL
makeint = function(data){
data$scen = gsub(".*_SS_(.*)_Mask.*", "\\1", data$ssimg )
data$smooth = !grepl("nopresmooth", data$scen)
data$smooth = revalue(as.character(data$smooth),
c("TRUE"="Smoothed", "FALSE"="Unsmoothed"))
data$int = gsub("_nopresmooth", "", data$scen)
data
}
ddf = makeint(ddf)
ddf$diffvol = (ddf$truevol - ddf$estvol) / 1000
ddf$absdiff = abs(ddf$diffvol)
long = melt(d, id.vars = c("id", "img", "rimg",
"ssimg"))
long = makeint(long)
long$id = as.numeric(factor(long$id))
runcols =  c("dice", "jaccard", "sens", "spec", "accur", "absdiff")
rc = runcols[ !runcols %in% c("absdiff")]
# res = ddply(ddf, .(id), function(x){
# 	cmin = colMins(x[, runcols])
# 	cmax = colMaxs(x[, runcols])
# 	cmean = colMeans(x[, runcols])
# 	xx = data.frame(t(cbind(cmin, cmax, cmean)))
# 	xx$run = c("min", "max", "mean")
# 	xx
# })
wmax = function(x){
which(x == max(x))
}
x = ddf[ ddf$img == ddf$img[1], ]
res = ddply(ddf, .(img), function(x){
print(x$id[1])
xx = sapply(x[, rc], wmax)
xx = x$scen[xx]
print(xx)
names(xx) = rc
xx
})
results= sapply(res[, rc], table)
maxtab = sapply(results, function(x) {
names(sort(x, decreasing=TRUE)[1])
})
res = ddply(ddf, .(scen), function(x){
cmin = colMins(x[, runcols])
cmax = colMaxs(x[, runcols])
cmean = colMeans(x[, runcols])
cmed = colMedians(as.matrix(x[, runcols]))
xx = data.frame(t(cbind(cmin, cmax, cmean, cmed)))
xx$run = c("min", "max", "mean", "median")
xx
})
nospec = long[ long$variable %in% c("accur", "sens"),]
long = long[ long$variable != "jaccard", ]
long$variable = revalue(long$variable, c("sens" = "Sensitivity",
"spec" = "Specificity",
"accur" = "Accuracy",
"dice" = "Dice Similarity Index"))
g = qplot(x = id, y = value, facets = smooth ~ variable , data = long,
colour=int)
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("")
g
?scale_color_discrete
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete(label="hey")
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete(title="hey")
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete(guide="hey")
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("hey")
g
?scale_color_discrete
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete(scale_name="FA")
g
g = qplot(x = variable, y = value, data = long, facets = smooth ~ .,
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("FA")
g
g = qplot(x = variable, y = value, data = long[ long$smooth == "Smoothed"],
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("FA")
g
g = qplot(x = variable, y = value, data = long[ long$smooth == "Smoothed",],
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("FA")
g
g = qplot(x = variable, y = value, data = long[ long$smooth == "Smoothed",],
colour=int, geom=c("boxplot")) + xlab("Metric") + ylab("Value") +
scale_color_discrete("FA") + scale_y_continuous(limits=c(.95, 1))
g
head(ssdf)
head(df)
head(ddf)
dd = ddf[ ddf$smooth == "Smoothed" ,]
g = qplot(x = 1-spec, y = sens, data = dd, facets = int ~ .)
g
dd = ddf[ ddf$smooth == "Smoothed" ,]
g = qplot(x = 1-spec, y = sens, data = dd, facets = int ~ .,
colour=id) + guides(colour=FALSE)
xlab("1 - Specificity") + ylab("Sensitivity") +
scale_y_continuous(limits=c(.95, 1))
g
dd = ddf[ ddf$smooth == "Smoothed" ,]
g = qplot(x = 1-spec, y = sens, data = dd, facets = int ~ .,
colour=id) + guides(colour=FALSE) +
xlab("1 - Specificity") + ylab("Sensitivity") +
scale_y_continuous(limits=c(.95, 1))
g
dd = ddf[ ddf$smooth == "Smoothed" & ddf$int %in% c("0.01", "0.1") ,]
g = qplot(x = 1-spec, y = sens, data = dd, facets = int ~ .,
colour=id) + guides(colour=FALSE) +
xlab("1 - Specificity") + ylab("Sensitivity") +
scale_y_continuous(limits=c(.95, 1))
g
plot(dd$accur[ddf$int== "0.01"], dd$accur[ddf$int== "0.1"])
plot(dd$accur[ddf$int== "0.01"], dd$accur[ddf$int== "0.1"])
abline(a=0, b=1)
rm(list=ls())
library(stargazer)
library(plyr)
# score = "NIHSS"
setwd('~/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline')
get.stuff = function(score){
load(paste0("Regress_ROI_", score, "_Results.Rda"))
best.mod = which.min(aics[, "With_Perc"])
mods = mods[[best.mod]]
co = mods$coefficients
co = rename(co, c("SexMale"="Sex: Male vs. Female",
"Base_ICH_10"="TICHVol per 10 cc",
"perc_ROI" = "HPR Coverage per 10%"))
mods$coefficients = co
co = keep.cmod$coefficients
co = rename(co, c("SexMale"="Sex: Male vs. Female",
"Base_ICH_10"="TICHVol per 10 cc",
"LOCGlobus Pallidus"=
paste0("Reader-Based Location",
"&&&& RRRRRRRRRR",
"\nRRRRR;RRRRR;Globus Pallidus")))
names(co) = gsub("^LOC", "RRRRR;RRRRR;", names(co))
keep.cmod$coefficients = co
res = list(mods, keep.cmod)
}
nihss.res = get.stuff(score = "NIHSS")
gcs.res = get.stuff(score = "GCS")
# colnames(gcs.res[[1]]$model)[1] = "BLAH"
# colnames(gcs.res[[2]]$model)[1] = "BLAH"
gcs.res[[1]]$call = call("lm",
list(formula = Y ~ Age + Sex + Base_ICH_10 + LOC))
gcs.res[[2]]$call = call("lm",
list(formula = Y ~ Age + Sex + Base_ICH_10 + LOC))
cov.name = "HPR Coverage per 10%"
make.coef = function(mod, cov.name){
nihss.coef = abs(coef(mod)[cov.name])
nihss.coef = sprintf("%02.1f", nihss.coef)
nihss.ci  = abs(confint(mod)[cov.name, ])
nihss.ci = paste(sprintf("%02.1f", nihss.ci), collapse = ", ")
nihss.ci = paste0("(95\\% CI: ", nihss.ci, ")")
return(list(coef = nihss.coef, ci = nihss.ci))
}
nihss= make.coef(nihss.res[[1]], cov.name = cov.name)
nihss.coef = nihss$coef
nihss.ci = nihss$ci
nihss= make.coef(nihss.res[[2]], cov.name = "RRRRR;RRRRR;Putamen")
put.nihss.coef = nihss$coef
put.nihss.ci = nihss$ci
cap = paste0("Regression Models for HPR-Based Analysis. The models for ",
"HPR coverage represent the best model based on the ",
"model-fit measures. ",
"We see that after adjusting for age, sex, and ",
"total baseline ICH volume, increasing 10\\%",
" coverage is expected to increase NIHSS score by ",
nihss.coef, " ", nihss.ci, " points. ",
" We see that all locations, compared to lobar hemorrhages",
" have higher estimated NIHSS scores, but putaminal ",
"hemorrhages were significantly higher by ",
put.nihss.coef, " ", put.nihss.ci, " points.")
gcs= make.coef(gcs.res[[1]], cov.name = cov.name)
gcs.coef = gcs$coef
gcs.ci = gcs$ci
gcs= make.coef(gcs.res[[2]], cov.name = "RRRRR;RRRRR;Putamen")
put.gcs.coef = gcs$coef
put.gcs.ci = gcs$ci
cap2 = paste0("Adjusting for other covariates, increasing 10\\%",
" coverage is expected to decrease GCS score by ",
gcs.coef, " ", gcs.ci, " points. ",
" We see that all locations, compared to lobar hemorrhages",
" have lower estimated GCS scores, but none were ",
"statistically different.")
cap = paste(cap, cap2 )
fullcap = cap
fullcap = NULL
fullcap = "Regression Models for HPR-Based Analysis"
rr = stargazer(nihss.res, gcs.res, type = "latex",
title = fullcap,
t.auto=FALSE, p.auto=FALSE,
ci= TRUE, omit.stat="all",
single.row = TRUE, star.char="", notes="",
notes.append=FALSE,
notes.label = "",
no.space = TRUE,
dep.var.caption = "",
label = "f:beta",
omit.table.layout = "n",
dep.var.labels = c("\\textbf{NIHSS Score}",
"\\textbf{GCS Score}"),
column.labels = rep(c("\\textbf{HPR Coverage}",
"\\textbf{Reader-Based}"), 2),
model.names = FALSE, model.numbers = FALSE,
digits = 1)
rr = gsub("RRRRR", "\\", rr, fixed=TRUE)
move = grep("\\caption", rr)
rr = rr[c(1:(move-1), (move+2):(length(rr)-1), move:(move+1), length(rr))]
empty.hline = grep("\\hline \\\\[-1.8ex]", rr, fixed=TRUE)
l = length(empty.hline)
empty.hline = empty.hline[c(1, (l-1):l)]
rr = rr[-empty.hline]
rr[5] = gsub("lcccc", "l@{}c@{}c|@{}c@{}c", rr[5])
rr[7] = gsub("\\multicolumn{2}{c}{\\textbf{NIHSS Score}}",
"\\multicolumn{2}{c|}{\\textbf{NIHSS Score}}", rr[7], fixed=TRUE)
writeLines(rr, con="Beta_Table.tex")
# }
?xtable
library(xtable)
?xtable
source('~/Dropbox/CTR/DHanley/CT_Registration/programs/ROI/Outcome_Regress_Mask.R')
rm(list=ls())
library(stargazer)
library(plyr)
# score = "NIHSS"
setwd('~/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline')
get.stuff = function(score){
load(paste0("Regress_ROI_", score, "_Results.Rda"))
best.mod = which.min(aics[, "With_Perc"])
mods = mods[[best.mod]]
co = mods$coefficients
co = rename(co, c("SexMale"="Sex: Male vs. Female",
"Base_ICH_10"="TICHVol per 10 cc",
"perc_ROI" = "HPR Coverage per 10%"))
mods$coefficients = co
co = keep.cmod$coefficients
co = rename(co, c("SexMale"="Sex: Male vs. Female",
"Base_ICH_10"="TICHVol per 10 cc",
"LOCGlobus Pallidus"=
paste0("Reader-Based Location",
"&&&& RRRRRRRRRR",
"\nRRRRR;RRRRR;Globus Pallidus")))
names(co) = gsub("^LOC", "RRRRR;RRRRR;", names(co))
keep.cmod$coefficients = co
res = list(mods, keep.cmod)
}
nihss.res = get.stuff(score = "NIHSS")
gcs.res = get.stuff(score = "GCS")
# colnames(gcs.res[[1]]$model)[1] = "BLAH"
# colnames(gcs.res[[2]]$model)[1] = "BLAH"
gcs.res[[1]]$call = call("lm",
list(formula = Y ~ Age + Sex + Base_ICH_10 + LOC))
gcs.res[[2]]$call = call("lm",
list(formula = Y ~ Age + Sex + Base_ICH_10 + LOC))
cov.name = "HPR Coverage per 10%"
make.coef = function(mod, cov.name){
nihss.coef = abs(coef(mod)[cov.name])
nihss.coef = sprintf("%02.1f", nihss.coef)
nihss.ci  = abs(confint(mod)[cov.name, ])
nihss.ci = paste(sprintf("%02.1f", nihss.ci), collapse = ", ")
nihss.ci = paste0("(95\\% CI: ", nihss.ci, ")")
return(list(coef = nihss.coef, ci = nihss.ci))
}
nihss= make.coef(nihss.res[[1]], cov.name = cov.name)
nihss.coef = nihss$coef
nihss.ci = nihss$ci
nihss= make.coef(nihss.res[[2]], cov.name = "RRRRR;RRRRR;Putamen")
put.nihss.coef = nihss$coef
put.nihss.ci = nihss$ci
cap = paste0("Regression Models for HPR-Based Analysis. The models for ",
"HPR coverage represent the best model based on the ",
"model-fit measures. ",
"We see that after adjusting for age, sex, and ",
"total baseline ICH volume, increasing 10\\%",
" coverage is expected to increase NIHSS score by ",
nihss.coef, " ", nihss.ci, " points. ",
" We see that all locations, compared to lobar hemorrhages",
" have higher estimated NIHSS scores, but putaminal ",
"hemorrhages were significantly higher by ",
put.nihss.coef, " ", put.nihss.ci, " points.")
gcs= make.coef(gcs.res[[1]], cov.name = cov.name)
gcs.coef = gcs$coef
gcs.ci = gcs$ci
gcs= make.coef(gcs.res[[2]], cov.name = "RRRRR;RRRRR;Putamen")
put.gcs.coef = gcs$coef
put.gcs.ci = gcs$ci
cap2 = paste0("Adjusting for other covariates, increasing 10\\%",
" coverage is expected to decrease GCS score by ",
gcs.coef, " ", gcs.ci, " points. ",
" We see that all locations, compared to lobar hemorrhages",
" have lower estimated GCS scores, but none were ",
"statistically different.")
cap = paste(cap, cap2 )
fullcap = cap
fullcap = NULL
fullcap = "Severity Score Regression Models for HPR-Based and Reader-Classified Location"
rr = stargazer(nihss.res, gcs.res, type = "latex",
title = fullcap,
t.auto=FALSE, p.auto=FALSE,
ci= TRUE, omit.stat="all",
single.row = TRUE, star.char="", notes="",
notes.append=FALSE,
notes.label = "",
no.space = TRUE,
dep.var.caption = "",
label = "f:beta",
omit.table.layout = "n",
dep.var.labels = c("\\textbf{NIHSS Score}",
"\\textbf{GCS Score}"),
column.labels = rep(c("\\textbf{HPR Coverage}",
"\\textbf{Reader-Based}"), 2),
model.names = FALSE, model.numbers = FALSE,
digits = 1)
rr = gsub("RRRRR", "\\", rr, fixed=TRUE)
move = grep("\\caption", rr)
rr = rr[c(1:(move-1), (move+2):(length(rr)-1), move:(move+1), length(rr))]
empty.hline = grep("\\hline \\\\[-1.8ex]", rr, fixed=TRUE)
l = length(empty.hline)
empty.hline = empty.hline[c(1, (l-1):l)]
rr = rr[-empty.hline]
rr[5] = gsub("lcccc", "l@{}c@{}c|@{}c@{}c", rr[5])
rr[7] = gsub("\\multicolumn{2}{c}{\\textbf{NIHSS Score}}",
"\\multicolumn{2}{c|}{\\textbf{NIHSS Score}}", rr[7], fixed=TRUE)
writeLines(rr, con="Beta_Table.tex")
# }
