brain <- contour3d(masked, x=1:dtemp[1], y=1:dtemp[2],
z=1:dtemp[3], level = 200, alpha = 0.37, draw = FALSE,
color="black")
# histfile = file.path(outdir, paste0(whichdir, "_Weighted_Sum_Image.nii.gz"))
histfile = file.path("~/CT_Registration/CT_Pipeline/",
paste0(whichdir, "_Binary_Sum_Image.nii.gz"))
histimg = readNIfTI(histfile)
maxn = ceiling(max(histimg)*111)
img_cut = function(img, breaks, ...){
cuts = cut(img, breaks=breaks, ...)
# cuts = factor(cuts, levels)
levs = levels(cuts)
cuts = as.numeric(cuts)
# res.p[ rs > ncut ] = cuts
img@.Data = array(cuts, dim=dim(img))
return(list(img=img, levs=levs))
}
npts = 111
breaks = seq(0, .45, by=.05)
clist = img_cut(histimg, breaks=breaks, include.lowest=FALSE)
cimg = clist$img
levs = clist$levs
col.cut = div_gradient_pal(low="blue",
mid="red",
high="yellow")(
seq(0, 1, length=length(levs))
)
alpha = c(.5, rep(1, length=length(levs)-1))
cimg[is.na(cimg)] = 0
x = makeScene(cimg, cutoffs = seq_along(levs) - .01, alpha=alpha ,
cols = col.cut)
# x = makeScene(histimg, cutoffs = breaks, alpha=alpha ,
#               cols = c("white", col.cut))
scene = c(list(brain), x)
write4D(scene,
outfile = "~/CT_Registration/programs/figure_for_3d_paper/100_Report_Figure.html",
fnames = c("brain.stl",
paste0("thresh", seq_along(levs), ".stl")),
visible = c(TRUE, rep(FALSE, length(levs))),
captions = c("brain", paste0("p-value: ", levs)),
reprint = FALSE, rescale=TRUE,
xtkgui = FALSE, toggle="slider")
write4D(scene,
outfile = "~/CT_Registration/programs/100_Report_Figure.html",
fnames = c("brain.stl",
paste0("thresh", seq_along(levs), ".stl")),
visible = c(TRUE, rep(FALSE, length(levs))),
captions = c("brain", paste0("p-value: ", levs)),
reprint = FALSE, rescale=TRUE,
xtkgui = FALSE, toggle="slider")
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "SMART_Hackathon_Day1"
mytitle <- 'SMART Hackathon: Day 1'
categories = c("rbloggers", "bmorebiostats")
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "SMART_Hackathon_Day2"
mytitle <- 'SMART Hackathon: Day 2: Writing Packages in RStudio'
categories = c("rbloggers", "bmorebiostats")
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
library(devtools)
?create
library(roxygen2)
?rd_roclet
help(package="devtools")
help(package="devtools")
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "SMART_Hackathon_Day2"
mytitle <- 'SMART Hackathon: Day 2: Writing Packages in RStudio'
categories = c("rbloggers", "bmorebiostats")
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
######### Send it to the Website
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#   opts_knit$set(
#     base.url = paste0(
#       'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                 base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
knit2wp(rmdname,
title = mytitle, categories = categories,
shortcode=TRUE, post_date_gmt = "20140430T11:11:04Z",
publish=publish)
}
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "SV_Scholarship"
mytitle <- 'Non Academia: Starting a Scholarship for My High School'
categories = NULL
# c("rbloggers", "bmorebiostats")
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
library(swirl)
swirl()
z <- 3+7
library(devtools)
install_github("plotly", "ropensci")
library(plotly)
## Loading required package: RCurl
## Loading required package: bitops
## Loading required package: RJSONIO
## Loading required package: ggplot2
library(ggplot2)
signup("muschellij2", "muschellij2@gmail.com")
signup
version = as.character(packageVersion("plotly"))
version
username = "muschellij2"
email = "muschellij2@gmail.com"
if (is.null(username))
key <- getOption("plotlyUsername", stop("you need a user name for Plot.ly - See the signup function"))
key
key
platform = "R"
version = as.character(packageVersion("plotly"))
url <- "https://plot.ly/apimkacct"
options(RCurlOptions = list(sslversion = 3, cainfo = system.file("CurlSSL",
"cacert.pem", package = "RCurl")))
respst <- postForm(url, platform = platform, version = version,
email = email, un = username)
plotly::signup
resp <- fromJSON(respst, simplify = FALSE)
resp
if (!is.null(resp$error))
cat(resp$err)
if (!is.null(resp$warning))
cat(resp$warning)
if (!is.null(resp$message))
cat(resp$message)
p <- plotly(username="muschellij2", key="m3c7cqpqee")
res <- p$plotly(c(1,2,3), c(4,2,1))
a <- qplot(conc, uptake, data = CO2, colour = Type) + scale_colour_discrete(name = "")
p$ggplotly(a)
?qplot(conc, uptake, data = CO2, colour = Type) + scale_colour_discrete(name = "")
?qplot
a <- qplot(conc, uptake, data = CO2, colour = Type, position="jitter") + scale_colour_discrete(name = "")
a
p$ggplotly(a)
q = p$ggplotly(a)
q
q$response$url
help(package="plotly")
iframe = function(q, width=650, height=550){
cmd = '<div class = "iframe_container">\n'
URL = q$response$url
cmd = paste0(cmd, sprintf('<iframe src="%s" width="%d" height="%d"',
URL,width, height))
cmd = paste0(cmd, 'frameBorder="0" seamless="seamless"',
'scrolling="no"></iframe>\n', '</div>')
cmd
}
iframe(q)
iframe = function(q, width=650, height=550){
cmd = '<div class = "iframe_container">\n'
URL = q$response$url
cmd = paste0(cmd, sprintf('<iframe src="%s" width="%d" height="%d"',
URL,width, height))
cmd = paste0(cmd, 'frameBorder="0" seamless="seamless"',
'scrolling="no"></iframe>\n', '</div>')
cat(cmd)
cmd
}
iframe(q)
iframe = function(q, width=650, height=550, catout = TRUE){
cmd = '<div class = "iframe_container">\n'
URL = q$response$url
cmd = paste0(cmd, sprintf('<iframe src="%s" width="%d" height="%d"',
URL,width, height))
cmd = paste0(cmd, 'frameBorder="0" seamless="seamless"',
'scrolling="no"></iframe>\n', '</div>')
if (catout) cat(cmd)
cmd
}
iframe(q)
?plotly
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "SV_Scholarship"
mytitle <- 'Non Academia: Starting a Scholarship for My High School'
categories = NULL
# c("rbloggers", "bmorebiostats")
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'PWD'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#   opts_knit$set(
#     base.url = paste0(
#       'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                 base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
knit2wp(rmdname,
title = mytitle, categories = categories,
shortcode=TRUE, post_date_gmt = "20140430T11:11:04Z",
publish=publish)
}
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "SV_Scholarship"
mytitle <- 'Non Academia: Starting a Scholarship for My High School'
categories = NULL
# c("rbloggers", "bmorebiostats")
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
######### Send it to the Website
if (wp){
if (!require('RWordPress'))
install.packages('RWordPress',
repos = 'http://www.omegahat.org/R',
type = 'source')
library(RWordPress)
pwd = 'hopkinsstat'
stopifnot(pwd != 'PWD')
options(WordpressLogin = c(strictlystat = pwd))
uname <- names(getOption("WordpressLogin"))
options( WordpressURL = 'http://hopstat.wordpress.com/xmlrpc.php')
### change this for the new folder
stopifnot(file.exists(rmdname))
opts_knit$set(base.dir = wpdir)
#   opts_knit$set(
#     base.url = paste0(
#       'https://dl.dropboxusercontent.com/u/600586/', wpfol, '/'),
#                 base.dir = wpdir)
opts_knit$set(upload.fun = imgur_upload,
base.url = NULL) # upload all images to imgur.com
knit2wp(rmdname,
title = mytitle, categories = categories,
shortcode=TRUE, post_date_gmt = "20140430T11:11:04Z",
publish=publish)
}
library(knitr)
wp = TRUE
#### set up new post
wpfol <- "WordPress_Hopstat"
wpdir <- file.path("~/Dropbox/Public", wpfol)
wpdir <- path.expand(wpdir)
folname <- "Typinator"
mytitle <- 'Typinator: Text is Better Expanded'
categories = NULL
# c("rbloggers", "bmorebiostats")
publish = TRUE
fol = file.path(wpdir, folname)
rmdname <- file.path(wpdir, folname,  paste0(folname, ".Rmd"))
if (!file.exists(fol)) {
dir.create(fol)
}
if (!file.exists(rmdname)) {
file.create(rmdname)
system(sprintf("open %s", rmdname))
}
library(ggplot)
library(MASS)
data(diamonds)
p<ggplot(diamonds,aes(x,price))+facet_grid(cut~color)+geom_point(color="grey")+geom_smooth(color="Red")+geom_smooth(method="lm",formula=y~x,color="blue")+geom_smooth(method="rlm",color="green")
p
library(ggplot2)
library(MASS)
data(diamonds)
p<ggplot(diamonds,aes(x,price))+facet_grid(cut~color)+geom_point(color="grey")+geom_smooth(color="Red")+geom_smooth(method="lm",formula=y~x,color="blue")+geom_smooth(method="rlm",color="green")
p
library(ggplot2)
library(MASS)
data(diamonds)
p<-ggplot(diamonds,aes(x,price))+facet_grid(cut~color)+geom_point(color="grey")+geom_smooth(color="Red")+geom_smooth(method="lm",formula=y~x,color="blue")+geom_smooth(method="rlm",color="green")
p
library(ggplot2)
library(MASS)
data(diamonds)
p <- ggplot(diamonds,aes(x,price)) + facet_grid(cut~color) +
geom_point(color=I("grey")) + geom_smooth(aes(colour="Loess")) +
geom_smooth(method="lm",formula=y~x, aes(colour="Linear
regression")) +
geom_smooth(method="rlm", aes(colour="Robust linear regression")) +
scale_colour_discrete(name = "Method", legend = TRUE)
p
?unit
??unit
R
library(oro.nifti)
?image.nifti
image.nifti
?image.nifti
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/CT_Registration/CT_Pipeline/")
source('~/.active-rstudio-document', echo=TRUE)
nihss.res
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(knitr)
knit("CT_Pipeline_Template.Rnw")
md.propn.md.prop = median(props) * N
n.md.prop = median(props) * N
n.md.prop
load("Top_0.01_Pvalues_df.Rda")
n = 10
nihss.tab = head(pvalimg.tab[["EVE_1"]], n)
nihss.tab$nvox = sprintf("%02.1f", nihss.tab$nvox)
names(nihss.tab) = c("NIHSS ROI", "Area")
load("GCS_Top_1000_Pvalues_df.Rda")
gcs.tab = head(pvalimg.tab[["EVE_1"]], n)
gcs.tab$nvox = sprintf("%02.1f", gcs.tab$nvox)
names(gcs.tab) = c("GCS ROI", "Area")
load("Population_Table_Engagement.Rda")
pop.tab = head(xtabs[["EVE_1"]], n)
pop.tab$EVE_1 = sprintf("%02.1f", pop.tab$EVE_1)
names(pop.tab) = c("Area", "Population Prevalence")
df = merge(pop.tab, nihss.tab, sort=FALSE, all = TRUE)
df = merge(df, gcs.tab, sort=FALSE, all = TRUE)
# names(jhut1.list)[names(jhut1.list) == "Background"] = "Ventricles"
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
df$Area = proper(df$Area)
df$Area = revalue(df$Area, c("Background" = "CSF"))
df$Area = gsub("_", " ", df$Area)
df = df[order(as.numeric(df$"Population Prevalence"),
as.numeric(df[, "NIHSS ROI"]),
as.numeric(df[, "GCS ROI"]),
decreasing=TRUE),]
df[sapply(df, is.na)] = ""
rownames(df) = NULL
xtab = xtable(df)
xtab = xtable(df,
caption=
paste0("Distribution of the top 10 areas of engagement ",
"for population ",
" 3D histogram, the NIHSS ROI was based on a p-value ",
" threshold of 0.01, the GCS ROI was based on voxels ",
"with 1000 smallest p-values.  Each value represents ",
"the percentage of the ROI engaged in this area.  ",
"The population-level areas are percentages ",
"weighted by proportion. Each distribution ",
" of areas is based on the Eve atlas.  ",
"We see that the population is engaged in ",
"areas of the CSF, such as the ventricles, and ",
" the insular and putaminal regions.",
" The ROI based on the NIHSS analysis engages ",
"primarily areas of the internal capsule ",
"and ventricular regions. ",
"The ROI based on the GCS analysis engages ",
"primarily the left thalamus and superior ",
"corona radiata.",
"The Eve",
"atlas can be used to calculate area engagement",
"on a per-scan level as well."),
align=c("llccc"),
label="t:breakdown")
print.xtable(xtab, file="breakdown.tex", include.rownames = FALSE)
rm(list=ls())
load("Top_0.01_Pvalues_df.Rda")
n = 10
nihss.tab = head(pvalimg.tab[["EVE_1"]], n)
nihss.tab$nvox = sprintf("%02.1f", nihss.tab$nvox)
names(nihss.tab) = c("NIHSS ROI", "Area")
load("GCS_Top_1000_Pvalues_df.Rda")
gcs.tab = head(pvalimg.tab[["EVE_1"]], n)
gcs.tab$nvox = sprintf("%02.1f", gcs.tab$nvox)
names(gcs.tab) = c("GCS ROI", "Area")
load("Population_Table_Engagement.Rda")
pop.tab = head(xtabs[["EVE_1"]], n)
pop.tab$EVE_1 = sprintf("%02.1f", pop.tab$EVE_1)
names(pop.tab) = c("Area", "Population Prevalence")
df = merge(pop.tab, nihss.tab, sort=FALSE, all = TRUE)
df = merge(df, gcs.tab, sort=FALSE, all = TRUE)
# names(jhut1.list)[names(jhut1.list) == "Background"] = "Ventricles"
proper = function(x){
substring(x, 1, 1) <- toupper(substring(x, 1, 1))
substring(x, 2) <- tolower(substring(x, 2))
x
}
df$Area = proper(df$Area)
df$Area = revalue(df$Area, c("Background" = "CSF"))
df$Area = gsub("_", " ", df$Area)
df = df[order(as.numeric(df$"Population Prevalence"),
as.numeric(df[, "NIHSS ROI"]),
as.numeric(df[, "GCS ROI"]),
decreasing=TRUE),]
df[sapply(df, is.na)] = ""
rownames(df) = NULL
xtab = xtable(df)
xtab = xtable(df,
caption=
paste0("Distribution of the top 10 areas of engagement ",
"for population ",
" 3D histogram, the NIHSS ROI was based on a p-value ",
" threshold of 0.01, the GCS ROI was based on voxels ",
"with 1000 smallest p-values.  Each value represents ",
"the percentage of the ROI engaged in this area.  ",
"The population-level areas are percentages ",
"weighted by proportion. Each distribution ",
" of areas is based on the Eve atlas.  ",
"We see that the population is engaged in ",
"areas of the CSF, such as the ventricles, and ",
" the insular and putaminal regions.",
" The ROI based on the NIHSS analysis engages ",
"primarily areas of the internal capsule ",
"and ventricular regions. ",
"The ROI based on the GCS analysis engages ",
"primarily the left thalamus and superior ",
"corona radiata.",
"The Eve",
"atlas can be used to calculate area engagement",
"on a per-scan level as well."),
align=c("llccc"),
label="t:breakdown")
print.xtable(xtab, file="breakdown.tex", include.rownames = FALSE)
