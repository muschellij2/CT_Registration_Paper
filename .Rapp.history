epics
res = reses$adj.r.squared#
    makeres = function(res, colname, digits=3, yes=TRUE) {#
        wc.adj = res[1,"With_Clot"]#
        cn = c("With_Perc", "nkeep", "pval")#
        res = res[, cn]#
        # res = res[1:nrow(res),] #
        res = rbind(c(wc.adj, rep(NA, ncol(res)-1)), res)#
        colnames(res) = c(colname, "N_Voxels", "P.value")#
        res = as.data.frame(res)#
        res[, colname] = round(res[, colname], digits)#
        if (yes) res[, colname] = sprintf(paste0("%0", digits+1, ".", digits, "f"), res[, colname])#
        res[, "P.value"] = sprintf(paste0("%0", 5, ".", 4, "f"), res[, "P.value"])#
        res[, "N_Voxels"] = str_trim(sprintf("%8.0f", res[, "N_Voxels"]))#
        res[1, c("N_Voxels", "P.value")] = NA#
        return(res)#
    }#
    res.adj = makeres(reses$adj.r.squared, "Adjusted R2")#
    res.r2 = makeres(reses$r.squared, "R2")#
    aic = makeres(aics, "AIC", yes=FALSE)#
    aic$AIC = aic$AIC - min(aic$AIC)#
    aic$AIC = round(aic$AIC, 2)#
    epic = makeres(epics, "EPIC", yes=FALSE)#
    epic$EPIC = epic$EPIC - min(epic$EPIC)#
    epic$EPIC = round(epic$EPIC, 2) #
    results = merge(res.adj, res.r2)#
    results = merge(results, aic)#
    results = merge(results, epic)#
    results = results[order(results$P.value, na.last = FALSE),]
results
epics
aic
acis
aics
epics
?AIC
stats:::AIC.default
?NA_integer_
epics
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_NIHSS_Results.Rda")
for (ilev in seq_along(loc.levs)){#
    lev = loc.levs[ilev]#
    n = loc.tab[ilev]#
    pct = loc.ptab[ilev]#
}
n
pct
load('Regress_ROI_NIHSS_Results.Rda')#
out = ""#
LLEV = length(loc.levs)#
com = ifelse(LLEV == 2, "", ",")#
for (ilev in seq_along(loc.levs)){#
    lev = loc.levs[ilev]#
    n = loc.tab[ilev]#
    pct = loc.ptab[ilev]#
    if (ilev == LLEV) {#
        out = paste0(" and ", out)#
    }#
    out = paste0(out, lev, "($N = ", n, ")", com)#
}
out
<<>>=#
load('Regress_ROI_NIHSS_Results.Rda')#
out = ""#
LLEV = length(loc.levs)#
com = ifelse(LLEV == 2, "", ",")#
for (ilev in seq_along(loc.levs)){#
    lev = loc.levs[ilev]#
    n = loc.tab[ilev]#
    pct = loc.ptab[ilev]#
    if (ilev == LLEV) {#
        out = paste0(out, " and ")#
    }#
    out = paste0(out, lev, "($N = ", n, ")", com)#
}
out
load('Regress_ROI_NIHSS_Results.Rda')#
out = ""#
LLEV = length(loc.levs)#
com = ifelse(LLEV == 2, "", ",")#
for (ilev in seq_along(loc.levs)){#
    lev = loc.levs[ilev]#
    n = loc.tab[ilev]#
    pct = loc.ptab[ilev]#
    if (ilev == LLEV) {#
        out = paste0(out, " and ")#
    }#
    out = paste0(out, lev, " ($N = ", n, "$) ", com)#
}
out
load('Regress_ROI_NIHSS_Results.Rda')#
out = ""#
LLEV = length(loc.levs)#
com = ifelse(LLEV == 2, "", ",")#
for (ilev in seq_along(loc.levs)){#
    lev = loc.levs[ilev]#
    n = loc.tab[ilev]#
    pct = loc.ptab[ilev]#
    if (ilev == LLEV) {#
        out = paste0(out, " and ")#
    }#
    out = paste0(out, lev, " ($N = ", n, "$)", com, " ")#
}
out
load('Regress_ROI_NIHSS_Results.Rda')#
out = ""#
LLEV = length(loc.levs)#
com = ifelse(LLEV == 2, "", ",")#
for (ilev in seq_along(loc.levs)){#
    lev = loc.levs[ilev]#
    n = loc.tab[ilev]#
    pct = loc.ptab[ilev]#
    if (ilev == LLEV) {#
        out = paste0(out, "and ")#
    }#
    out = paste0(out, lev, " ($N = ", n, "$)", com, " ")#
}
out
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_NIHSS_Results.Rda")
ls()
res = reses$adj.r.squared
res
res[, "pval"] == .05
res[res[, "pval"] == .05, "nkeep"]
load('Regress_ROI_NIHSS_Results.Rda')#
res = reses$adj.r.squared#
res = res[, c("pval", "nkeep")]#
res = data.frame(res)
res
res$pval
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_NIHSS_Results.Rda")
runres = function(){#
    res = reses$adj.r.squared#
    makeres = function(res, colname, digits=3, yes=TRUE) {#
        wc.adj = res[1,"With_Clot"]#
        cn = c("With_Perc", "nkeep", "pval")#
        res = res[, cn]#
        # res = res[1:nrow(res),] #
        res = rbind(c(wc.adj, rep(NA, ncol(res)-1)), res)#
        colnames(res) = c(colname, "N_Voxels", "P.value")#
        res = as.data.frame(res)#
        res[, colname] = round(res[, colname], digits)#
        if (yes) res[, colname] = sprintf(paste0("%0", digits+1, ".", digits, "f"), res[, colname])#
        res[, "P.value"] = sprintf(paste0("%0", 5, ".", 4, "f"), res[, "P.value"])#
        res[, "N_Voxels"] = str_trim(sprintf("%8.0f", res[, "N_Voxels"]))#
        res[1, c("N_Voxels", "P.value")] = NA#
        return(res)#
    }#
    res.adj = makeres(reses$adj.r.squared, "Adjusted R2")#
    res.r2 = makeres(reses$r.squared, "R2")#
    res.sd = makeres(reses$sigma, "RMSE")#
    aic = makeres(aics, "AIC", yes=FALSE)#
    aic$AIC = aic$AIC - min(aic$AIC)#
    aic$AIC = round(aic$AIC, 2)#
    epic = makeres(epics, "EPIC", yes=FALSE)#
    epic$EPIC = epic$EPIC - min(epic$EPIC)#
    epic$EPIC = round(epic$EPIC, 2) #
    results = merge(res.adj, res.r2)#
    results = merge(results, aic)#
    results = merge(results, epic)#
    results = merge(results, res.sd)#
    results = results[order(results$P.value, na.last = FALSE),]#
    results[1,"N_Voxels"] = "Location Model"#
    # colnames(results) = c("Number of Voxels", "P-value", "Adjusted R$^2$", "R$^2$", "EPIC", "RMSE")#
#
    colnames(results) = c("Number of Voxels", "P-value", "Adjusted R$^2$", "R$^2$", "AIC", "EPIC", "RMSE")    #
    return(results)#
}
library(xtable)
results = runres()#
nihss.xres = xtable(results, caption= "Table of model-git measures for clot location model vs. CT voxel-based ROI models NIHSS", align=c("crcrcccc"), label="t:nihss" )
library(stringr)
results = runres()#
nihss.xres = xtable(results, caption= "Table of model-git measures for clot location model vs. CT voxel-based ROI models NIHSS", align=c("crcrcccc"), label="t:nihss" )
nihss.xres
results
res
results
sapply(results[, c("Adjusted R$^2$", "R$^2$")], order)
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order)
x1 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=TRUE)
x1
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=TRUE)load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=TRUE)#
x = data.frame(cbind(x1, x2))#
sapply(x, function(z) which(z == 1))
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=TRUE)#
x = data.frame(cbind(x1, x2))#
sapply(x, function(z) which(z == 1))
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)#
x = data.frame(cbind(x1, x2))#
sapply(x, function(z) which(z == 1))
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)#
x = data.frame(cbind(x1, x2))#
best = sapply(x, function(z) which(z == 1))#
stopifnot(length(unique(best)) == 1)#
best = best[1]
best
results[best,]
results[best, c("Number of Voxels", "P-value")]
load('Regress_ROI_GCS_Results.Rda')#
results = runres()#
gcs.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)#
x = data.frame(cbind(x1, x2))#
best = sapply(x, function(z) which(z == 1))#
stopifnot(length(unique(best)) == 1)#
best = best[1]#
best.mod = results[best, c("Number of Voxels", "P-value")]
best.mod
load('Regress_ROI_GCS_Results.Rda')#
results = runres()#
gcs.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)#
x = data.frame(cbind(x1, x2))#
best = sapply(x, function(z) which(z == 1))#
stopifnot(length(unique(best)) == 1)#
best = best[1]#
best.mod = results[best, c("Number of Voxels", "P-value")]#
stopifnot(best.mod[, "P-value"] != .05)
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)#
x = data.frame(cbind(x1, x2))#
best = sapply(x, function(z) which(z == 1))#
stopifnot(length(unique(best)) == 1)#
best = best[1]#
best.mod = results[best, c("Number of Voxels", "P-value")]#
stopifnot(best.mod[, "P-value"] != .05)
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)#
x = data.frame(cbind(x1, x2))#
best = sapply(x, function(z) which(z == 1))#
stopifnot(length(unique(best)) == 1)#
best = best[1]#
best.mod = results[best,]#
stopifnot(best.mod[, "P-value"] != .05)
best.mod
nihss.res
nihss.res[1,]
nihss.res[nihss.res[, "Number of Voxels"] == "Location Model",]
load('Regress_ROI_GCS_Results.Rda')#
results = runres()#
nihss.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)#
x = data.frame(cbind(x1, x2))#
best = sapply(x, function(z) which(z == 1))#
stopifnot(length(unique(best)) == 1)#
best = best[1]#
best.mod = results[best,]#
stopifnot(best.mod[, "P-value"] != .05)#
gcs.best = best.mod#
gcs.loc = gcs.res[gcs.res[, "Number of Voxels"] == "Location Model",]
gcs.loca
gcs.loc
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)
results
x
class(results)
x1
order(results$"Adjusted R$^2$")
rank(results$"Adjusted R$^2$")
order(results$"Adjusted R$^2$", decreasing=TRUE)
rank(results$"Adjusted R$^2$", decreasing=TRUE)
?ramnk
?rank
rank(results$"Adjusted R$^2$")
rank(-results$"Adjusted R$^2$")
rank(-(results$"Adjusted R$^2$"))
results$"Adjusted R$^2$"
cn = colnames(results)
cn
res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, cn] = as.numeric(results[, cn])#
    x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)
c
res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(results[, c("Adjusted R$^2$", "R$^2$")], order, decreasing= TRUE)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], order, decreasing=FALSE)#
    x = data.frame(cbind(x1, x2))#
    best = sapply(x, function(z) which(z == 1))#
    stopifnot(length(unique(best)) == 1)#
    best = best[1]#
    best.mod = results[best,]#
    stopifnot(best.mod[, "P-value"] != .05)#
    loc = res[res[, "Number of Voxels"] == "Location Model",]
x1
results[, c("Adjusted R$^2$", "R$^2$")]
results[, c("Adjusted R$^2$")]
rank(results[, c("Adjusted R$^2$")])
order(results[, c("Adjusted R$^2$")])
rank(-results[, c("Adjusted R$^2$")])
res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(-results[, c("Adjusted R$^2$", "R$^2$")], rank)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], rank)
x1
x2
res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(-results[, c("Adjusted R$^2$", "R$^2$")], rank)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], rank)#
    x = data.frame(cbind(x1, x2))#
    best = sapply(x, function(z) which(z == 1))#
    stopifnot(length(unique(best)) == 1)#
    best = best[1]#
    best.mod = results[best,]#
    stopifnot(best.mod[, "P-value"] != .01)#
    loc = res[res[, "Number of Voxels"] == "Location Model",]#
    return(list(best.mod=best.mod, loc.mod = loc))
best.mod
get.best = function(results){#
    res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(-results[, c("Adjusted R$^2$", "R$^2$")], rank)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], rank)#
    x = data.frame(cbind(x1, x2))#
    best = sapply(x, function(z) which(z == 1))#
    stopifnot(length(unique(best)) == 1)#
    best = best[1]#
    best.mod = results[best,]#
    stopifnot(best.mod[, "P-value"] != .01)#
    loc = res[res[, "Number of Voxels"] == "Location Model",]#
    return(list(best.mod=best.mod, loc.mod = loc))#
}
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
lres = get.best(results)#
nihss.best = lres$best.mod#
nihss.loc = lres$loc.mod
load('Regress_ROI_GCS_Results.Rda')#
results = runres()#
gcs.res = results#
lres = get.best(results)#
gcs.best = lres$best.mod#
gcs.loc = lres$loc.mod
results
es = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(-results[, c("Adjusted R$^2$", "R$^2$")], rank)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], rank)#
    x = data.frame(cbind(x1, x2))
x
best = sapply(x, function(z) which(z == 1))
best
res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(-results[, c("Adjusted R$^2$", "R$^2$")], rank)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], rank)#
    x = data.frame(cbind(x1, x2))#
    best = sapply(x, function(z) which(z == 1))#
    stopifnot(length(unique(best)) == 1)#
    best = best[1]
best
best.mod = results[best,]
best.mod
get.best = function(results){#
    res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(-results[, c("Adjusted R$^2$", "R$^2$")], rank)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], rank)#
    x = data.frame(cbind(x1, x2))#
    best = sapply(x, function(z) which(z == 1))#
    stopifnot(length(unique(best)) == 1)#
    best = best[1]#
    best.mod = results[best,]#
    stopifnot(best.mod[, "P-value"] == .01)#
    loc = res[res[, "Number of Voxels"] == "Location Model",]#
    return(list(best.mod=best.mod, loc.mod = loc))#
}
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
lres = get.best(results)#
nihss.best = lres$best.mod#
nihss.loc = lres$loc.mod
res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(-results[, c("Adjusted R$^2$", "R$^2$")], rank)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], rank)#
    x = data.frame(cbind(x1, x2))#
    best = sapply(x, function(z) which(z == 1))#
    stopifnot(length(unique(best)) == 1)#
    best = best[1]#
    best.mod = results[best,]
best
<<get_best>>=#
get.best = function(results){#
    res = results#
    cn = colnames(results)#
    cn = cn[ ! cn%in% c("Number of Voxels", "P-value")]#
    for (icol in cn) results[, icol] = as.numeric(results[, icol])#
    x1 = sapply(-results[, c("Adjusted R$^2$", "R$^2$")], rank)#
    x2 = sapply(results[, c("AIC", "EPIC", "RMSE")], rank)#
    x = data.frame(cbind(x1, x2))#
    best = sapply(x, function(z) which(z == 1))#
    stopifnot(length(unique(best)) == 1)#
    best = best[1]#
    best.mod = results[best,]#
    # stopifnot(best.mod[, "P-value"] == .01)#
    loc = res[res[, "Number of Voxels"] == "Location Model",]#
    return(list(best.mod=best.mod, loc.mod = loc))#
}#
#
@#
<<runnihss>>=#
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
lres = get.best(results)#
nihss.best = lres$best.mod#
nihss.loc = lres$loc.mod#
@#
<<rungcs>>=#
load('Regress_ROI_GCS_Results.Rda')#
results = runres()#
gcs.res = results#
lres = get.best(results)#
gcs.best = lres$best.mod#
gcs.loc = lres$loc.mod#
@
gcs.best
nihss.best
gcs.best
gcs.best$"Number of Voxels"
nihss.best$"v"
nihss.best$"P-value"
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
lres = get.best(results)#
nihss.best = lres$best.mod#
nihss.loc = lres$loc.mod#
nihss.bestr2 = nihss.best$"R$^2$"#
nihss.locr2 = nihss.loc"R$^2$"#
nihss.rat = sprintf("%.0f", (nihss.bestr2 / nihss.locr2 - 1) * 100)nihss.best$"P-value"
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
lres = get.best(results)#
nihss.best = lres$best.mod#
nihss.loc = lres$loc.mod#
nihss.bestr2 = nihss.best$"R$^2$"#
nihss.locr2 = nihss.loc$"R$^2$"#
nihss.rat = sprintf("%.0f", (nihss.bestr2 / nihss.locr2 - 1) * 100)
nihss.bestr2
nihss.locr2
load('Regress_ROI_NIHSS_Results.Rda')#
results = runres()#
nihss.res = results#
lres = get.best(results)#
nihss.best = lres$best.mod#
nihss.loc = lres$loc.mod#
nihss.bestr2 = nihss.best$"R$^2$"#
nihss.locr2 = as.numeric(nihss.loc$"R$^2$")#
nihss.rat = sprintf("%.0f", (nihss.bestr2 / nihss.locr2 - 1) * 100)
nihss.rat
load('Regress_ROI_GCS_Results.Rda')#
results = runres()#
gcs.res = results#
lres = get.best(results)#
gcs.best = lres$best.mod#
gcs.loc = lres$loc.mod#
gcs.bestr2 = gcs.best$"R$^2$"#
gcs.locr2 = as.numeric(gcs.loc$"R$^2$")#
gcs.rat = sprintf("%.0f", (gcs.bestr2 / gcs.locr2 - 1) * 100)
gcs.rat
q('no')
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_GCS_Results.Rda")
ls()
cmode
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_NIHSS_Results.Rda")
cmod
summary(cmod)
summary(mod)
mods
sapply(mods, summary)
coef(sapply(mods, summary))
sapply(mods, summary)
sapply(mods, function(x) coef(summary(x)))
sapply(mods, function(x) summary(x))
x = summary(mods[[1]])
x
x$coefficients
library(stargazer)
stargazer(mods)
names(mods)
loc.levs
summary(cmod)
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_NIHSS_Results.Rda")
cmod
summary(cmod)
summary(mods[[``]])
summary(mods[[1]])
ls
dir()
ls()
aics()
aics
names(mods) = aics[, "nkeep"]
library(stargazer)
stargazer(mods)
?stargazer(mods)
stargazer(mods, column.labels = names(mods))
?stargazer(mods, column.labels = names(mods))
stargazer(mods, column.labels = names(mods), covariate.labels = c("blah", SexMale="mallee"))
mdos
mods
mm = c(mods, "Location Model"=cmod)
mm
cmod
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_NIHSS_Results.Rda")
cmod
mm = c(mods, "Location Model"=cmod)
mm
mm = list(mods, "Location Model"=cmod)
m
mm
class(mods[[1]])
class(cmod)
c(mods, cmod)
?c
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_NIHSS_Results.Rda")
ls()
aics
mods
c(mods, list(cmod))
mm = c(mods, list(cmod))
library(stargazer)
stargazer(mm)
stargazer
stargazer:::.stargazer.wrap
coef(mm[[7]])
c = coef(mm[[7]])
c
names(c) = gsub("LOC", "", names(c))
c
coef(mm[[7]]) = c
coef
getMethods("coef")
methods(generic.function="coef")
coef.default
?coef
stats:::coef.default
mm[[7]]$coefficients = c
coef(mm[[7]])
summary(mm[[7]])
stargazer(mm)
?stargazer(mm, )
stargazer(mm, t.auto=FALSE)
?stargazer(mm, t.auto=FALSE)
?stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci.auto = TRUE)
stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE)
?stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE)
stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE, summary=FALSE)
?stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE)
stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE, summary=FALSE, keep.stat = NULL)
stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE, summary=FALSE, keep.stat = "")
?stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE)
stargazer_stat_code_list()
? stargazer_stat_code_list
?stargazer_stat_code_list
?stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE)
stargazer(mm, t.auto=FALSE, p.auto=FALSE, ci= TRUE, omit.stat="all")
ls()
aic
aics
which.min(aics[, "With_Clot"])
which.min(aics[, "With_Perc"])
aics[which.min(aics[, "With_Perc"]),]
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Regress_ROI_NIHSS_Results.Rda")#
nihss.best.mod = which.min(aics[, "With_Perc"])#
#
mods = mods[[nihss.best.mod]]
mods
summary(mods)
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Population_Table_Engagement.Rda")
ls()
tops
xtabs
xtabs$EVE_1
head(xtabs$EVE_1)
head(xtabs$EVE_1, 20)
head(xtabs$EVE_1, 10)
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Top_3000_Pvalues_df.Rda")
pvalimg.tab
head(pvalimg.tab, 10)
head(pvalimg.tab[["EVE_1"]], 10)
load("/Users/johnmuschelli/Dropbox/CTR/DHanley/CT_Registration/CT_Pipeline/Top_0.01_Pvalues_df.Rda")
pvalimg.tab
